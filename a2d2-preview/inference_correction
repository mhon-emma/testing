// Copy output back to host with correct format [1, 8, 8400]
float* host_output = new float[8 * 8400];
cudaMemcpy(host_output, det_boxes_d, 8 * 8400 * sizeof(float), cudaMemcpyDeviceToHost);

// Parse detections from the [8, 8400] format
int detection_count = 0;
std::cout << "=== Parsing detections ===" << std::endl;

for (int i = 0; i < 8400 && detection_count < 1000; i++) {
    // Access the 8 values for detection i
    float x_center = host_output[0 * 8400 + i];  
    float y_center = host_output[1 * 8400 + i];  
    float width = host_output[2 * 8400 + i];    
    float height = host_output[3 * 8400 + i];   
    float confidence = host_output[4 * 8400 + i];
    float class_id_f = host_output[5 * 8400 + i];
    
    // Check if this is a valid detection
    if (confidence > 0.5) {  
        // Store in your existing arrays
        det_scores[detection_count] = confidence;
        det_classes[detection_count] = class_id_f;
        det_boxes[detection_count * 4 + 0] = x_center;
        det_boxes[detection_count * 4 + 1] = y_center;
        det_boxes[detection_count * 4 + 2] = width;
        det_boxes[detection_count * 4 + 3] = height;
        
        detection_count++;
    }
}

// Update num_dets
int num_dets = detection_count;
std::cout << "Found " << num_dets << " valid detections" << std::endl;

// Now use your existing detection loop (keep lines 186-199 as they were)
for (int i = 0; i < num_dets && i < 1000; i++) {
    // Your existing detection processing code...
