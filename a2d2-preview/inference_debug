// Copy output back to host with correct format [1, 18, 8400]
float* host_output = new float[18 * 8400];
cudaMemcpy(host_output, det_boxes_d, 18 * 8400 * sizeof(float), cudaMemcpyDeviceToHost);

// Debug: Print structure first
std::cout << "=== Output Structure Debug [18, 8400] ===" << std::endl;
std::cout << "First detection (index 0) - all 18 values:" << std::endl;
for (int ch = 0; ch < 18; ch++) {
    std::cout << "Channel " << ch << ": " << host_output[ch * 8400 + 0] << std::endl;
}

// Parse detections from the [18, 8400] format
int detection_count = 0;
for (int i = 0; i < 8400 && detection_count < 1000; i++) {
    // Get bounding box (first 4 channels)
    float x_center = host_output[0 * 8400 + i];  
    float y_center = host_output[1 * 8400 + i];  
    float width = host_output[2 * 8400 + i];    
    float height = host_output[3 * 8400 + i];   
    
    // Get objectness confidence (channel 4)
    float objectness = host_output[4 * 8400 + i];
    
    // Find best class from channels 5-17 (13 classes)
    int best_class = 0;
    float best_class_prob = host_output[5 * 8400 + i];
    for (int c = 1; c < 13; c++) {
        float class_prob = host_output[(5 + c) * 8400 + i];
        if (class_prob > best_class_prob) {
            best_class = c;
            best_class_prob = class_prob;
        }
    }
    
    // Final confidence = objectness * best_class_probability
    float final_confidence = objectness * best_class_prob;
    
    // Use lower threshold for testing
    if (final_confidence > 0.1) {  
        std::cout << "Detection " << detection_count << ": conf=" << final_confidence 
                  << " (obj=" << objectness << " * class=" << best_class_prob << ")"
                  << " box=[" << x_center << "," << y_center << "," << width << "," << height << "]" 
                  << " class=" << best_class << std::endl;
        
        det_scores[detection_count] = final_confidence;
        det_classes[detection_count] = (float)best_class;
        det_boxes[detection_count * 4 + 0] = x_center;
        det_boxes[detection_count * 4 + 1] = y_center;
        det_boxes[detection_count * 4 + 2] = width;
        det_boxes[detection_count * 4 + 3] = height;
        detection_count++;
    }
}

int num_dets = detection_count;
std::cout << "Found " << num_dets << " valid detections" << std::endl;
